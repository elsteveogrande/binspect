#!/usr/bin/env bash

if [[ ! -d include ]] ; then
  echo "chdir to project root, then run as: scripts/t"
  exit 1
fi

if [[ -z $TESTCC ]] ; then echo "set TESTCC" ; exit 1 ; fi

BUILD=${BUILD:-build}
PROG=${PROG:-$BUILD/test}
OPT=${OPT:-}
FSAN=${FSAN:-}
COMP=${COMP:llvm}

mkdir -p "${BUILD}"

MOREFLAGS=""
CC=""
if [[ $COMP == llvm ]] ; then
  for CCX in clang++-22 clang++-21 clang++-20 clang++ ; do
    { which $CCX || continue ; }
    CC=$CCX
    MOREFLAGS="-Wreturn-stack-address"
    break
  done
elif [[ $COMP == gcc ]] ; then
  for CCX in g++-16 g++-15 g++-14 g++ ; do
    { which $CCX || continue ; }
    # Ensure this isn't e.g. "Apple clang" posing as gcc
    { $CCX --version 2>&1 | head -n1 | cut -c-3 | grep 'g++' || continue ; }
    CC=$CCX
    MOREFLAGS="-Wreturn-local-addr"
    break
  done
fi

if [[ -z $CC ]] ; then
  echo "need COMP set to 'llvm' or 'gcc', and working clang++/g++"
  exit 1
fi

if [[ $COMP == "gcc" && ! -z $FSAN ]] ; then
  # Won't work on MacOS; just disable this even for CI.
  # We'll test SAN w/ Clang + libc++
  echo "no SAN for g++"
  exit 1
fi

if [[ $COMP == "llvm" ]] ; then
  STDLIB="-stdlib=libc++"
else
  STDLIB=
fi

set -xeuo pipefail

if [[ $COMP == gcc ]]; then
  FLAGSFILE=$(mktemp -t compile_flags.XXXXXX)
  cat compile_flags.txt | sed \
    's/-Wreturn-stack-address/-Wreturn-local-addr/' \
    > "${FLAGSFILE}"
else
  FLAGSFILE="compile_flags.txt"
fi

"${CC}"                         \
  "@${FLAGSFILE}"               \
  -g -Og -fno-inline            \
  -UNDEBUG                      \
  ${FSAN} ${OPT} ${STDLIB}      \
  -o "${PROG}"                  \
  "${TESTCC}"
